{"version":3,"sources":["App.js","index.js"],"names":["padTime","time","toString","padStart","App","useState","title","setTitle","timeLeft","setTimeLeft","isRunning","setIsRunning","intervalRef","useRef","resetTimer","clearInterval","current","minutes","Math","floor","seconds","className","Button","onClick","setInterval","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAIA,SAASA,EAAQC,GAChB,OAAOA,EAAKC,WAAWC,SAAS,EAAG,KAGrB,SAASC,IAAO,IAAD,EACHC,mBAAS,wBADN,mBACtBC,EADsB,KACfC,EADe,OAEGF,mBAAS,MAFZ,mBAEtBG,EAFsB,KAEZC,EAFY,OAGKJ,oBAAS,GAHd,mBAGtBK,EAHsB,KAGXC,EAHW,KAIvBC,EAAcC,iBAAO,MAyB3B,SAASC,IACRC,cAAcH,EAAYI,SAC1BJ,EAAYI,QAAU,KACtBT,EAAS,8BACTE,EAAY,MACZE,GAAa,GAGd,IAAMM,EAAUjB,EAAQkB,KAAKC,MAAMX,EAAW,KACxCY,EAAUpB,EAAQQ,EAAqB,GAAVS,GAEnC,OACC,yBAAKI,UAAU,OACd,4BAAKf,GAEL,yBAAKe,UAAU,SACd,8BAAOJ,GACP,mCACA,8BAAOG,IAGR,yBAAKC,UAAU,YACZX,GAAa,kBAACY,EAAA,EAAD,CAAQC,QA7C1B,WAC4B,MAAvBX,EAAYI,UAEhBT,EAAS,SACTI,GAAa,GACbC,EAAYI,QAAUQ,aAAY,WACjCf,GAAY,SAACD,GACZ,OAAIA,GAAY,EAAUA,EAAW,GACrCM,IACO,QAEN,QAkCc,SACdJ,GAAa,kBAACY,EAAA,EAAD,CAAQC,QAhCzB,WAC6B,OAAxBX,EAAYI,UAChBT,EAAS,oBACTQ,cAAcH,EAAYI,SAC1BJ,EAAYI,QAAU,KACtBS,QAAQC,IAAId,EAAYI,SACxBL,GAAa,MA0BG,QACd,kBAACW,EAAA,EAAD,CAAQC,QAAST,GAAjB,WCzDJa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.4bb77852.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css';\nimport { Button } from '@material-ui/core';\n\nfunction padTime(time) {\n\treturn time.toString().padStart(2, '0');\n}\n\nexport default function App() {\n\tconst [title, setTitle] = useState('Press START to begin');\n\tconst [timeLeft, setTimeLeft] = useState(20 * 60);\n\tconst [isRunning, setIsRunning] = useState(false);\n\tconst intervalRef = useRef(null);\n\n\tfunction startTimer() {\n\t\tif (intervalRef.current != null) return;\n\n\t\tsetTitle('FOCUS');\n\t\tsetIsRunning(true);\n\t\tintervalRef.current = setInterval(() => {\n\t\t\tsetTimeLeft((timeLeft) => {\n\t\t\t\tif (timeLeft >= 1) return timeLeft - 1;\n\t\t\t\tresetTimer();\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}, 1000);\n\t}\n\n\tfunction stopTimer() {\n\t\tif (intervalRef.current === null) return;\n\t\tsetTitle('Get back to work');\n\t\tclearInterval(intervalRef.current);\n\t\tintervalRef.current = null;\n\t\tconsole.log(intervalRef.current);\n\t\tsetIsRunning(false);\n\t}\n\n\tfunction resetTimer() {\n\t\tclearInterval(intervalRef.current);\n\t\tintervalRef.current = null;\n\t\tsetTitle('Ready to go another round?');\n\t\tsetTimeLeft(20 * 60);\n\t\tsetIsRunning(false);\n\t}\n\n\tconst minutes = padTime(Math.floor(timeLeft / 60));\n\tconst seconds = padTime(timeLeft - minutes * 60);\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t<h2>{title}</h2>\n\n\t\t\t<div className='timer'>\n\t\t\t\t<span>{minutes}</span>\n\t\t\t\t<span>:</span>\n\t\t\t\t<span>{seconds}</span>\n\t\t\t</div>\n\n\t\t\t<div className='buttons'>\n\t\t\t\t{!isRunning && <Button onClick={startTimer}>Start</Button>}\n\t\t\t\t{isRunning && <Button onClick={stopTimer}>Stop</Button>}\n\t\t\t\t<Button onClick={resetTimer}>Reset</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}